<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>1999LIJIAN</title>
  
  
  <link href="https://1999lijian.github.io/atom.xml" rel="self"/>
  
  <link href="https://1999lijian.github.io/"/>
  <updated>2020-11-12T14:13:46.166Z</updated>
  <id>https://1999lijian.github.io/</id>
  
  <author>
    <name>LIJIAN</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Java进阶</title>
    <link href="https://1999lijian.github.io/2020/11/12/Java%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"/>
    <id>https://1999lijian.github.io/2020/11/12/Java%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/</id>
    <published>2020-11-12T14:24:39.000Z</published>
    <updated>2020-11-12T14:13:46.166Z</updated>
    
    <content type="html"><![CDATA[<h1 id="java基础进阶"><a href="#java基础进阶" class="headerlink" title="java基础进阶"></a>java基础进阶</h1><h2 id="面向对象思想概念："><a href="#面向对象思想概念：" class="headerlink" title="面向对象思想概念："></a><strong>面向对象思想概念：</strong></h2><ul><li>Java是一种面向对象的高级编程语言</li><li><strong>面向对象：</strong>是用代码去高度模拟现实世界的事物，从而让软件为任务处理业务，为人类服务</li><li><strong>高级语言：</strong>代码看起来很像人类的自然语言</li></ul><h2 id="面向对象最重要的两个概念：类和对象"><a href="#面向对象最重要的两个概念：类和对象" class="headerlink" title="面向对象最重要的两个概念：类和对象"></a><strong>面向对象最重要的两个概念：类和对象</strong></h2><ul><li><strong>类：</strong>相同失误共同特征的描述<br>类只是学术上的一个概念并非真实存在的，只能描述一类事物</li><li><strong>对象：</strong>是真实存在的实例<br><strong>实例==对象</strong></li><li><strong>结论：</strong>有了类和对象就可以描述万千世界所有的事物<br><strong>必须先有 类才能有对象</strong></li><li><strong>定义类：</strong><br>格式：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">修饰符 class 类名&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注意：</strong></p><ol><li>类名的首字母建议大写<br>满足驼峰模式(StudentNameCode)</li><li>一个Java代码文件中可以定义多个类<br>但是按照规定还是建议一个Java文件定义一个类</li><li>一个Java代码文件中只能有一个类是用public修饰的，而且public修饰的类名必须成为当前Java代码的文件名称</li></ol><ul><li>类中的成分：有且仅有五大成分</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">修饰符 class 类名&#123;</span><br><span class="line">  &#x2F;&#x2F;1.成员变量(Field):描述类或者对象的属性信息的</span><br><span class="line">  &#x2F;&#x2F;2.成员方法(Method):描述类或者对象的行为信息的</span><br><span class="line">  &#x2F;&#x2F;3.构造器(Constructor):初始化一个对象返回</span><br><span class="line">  &#x2F;&#x2F;4.代码块</span><br><span class="line">  &#x2F;&#x2F;5.内部类</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>类中有且仅有五种成分，否则代码报错！</strong></p><ul><li>构造器:<br>格式:</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">修饰符 类名(形参列表)&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>构造器的作用：</strong>初始化类的一个对象返回</li><li><strong>构造器的分类：</strong>无参数构造器，有参数构造器</li><li><strong>构造器的注意：</strong>一个类默认自带一个无参数构造器，但是如果泄露有参数构造器那么默认的无参数构造器就消失了，此时如果还需要用无参构造器就需要自己从新写一个</li><li><strong>构造器初始化对象的格式：</strong></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">类名 对象名称 &#x3D; new 构造器;</span><br><span class="line">Student s &#x3D; new Student();</span><br></pre></td></tr></table></figure><ul><li>**无参数构造器的作用:**初始化一个类的对象(使用对象默认值初始化)返回</li><li>**有参数构造器的作用:**初始化也给类的对象(可以在初始化对象的时候为对象赋值)返回</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;java基础进阶&quot;&gt;&lt;a href=&quot;#java基础进阶&quot; class=&quot;headerlink&quot; title=&quot;java基础进阶&quot;&gt;&lt;/a&gt;java基础进阶&lt;/h1&gt;&lt;h2 id=&quot;面向对象思想概念：&quot;&gt;&lt;a href=&quot;#面向对象思想概念：&quot; class=&quot;he</summary>
      
    
    
    
    <category term="Java" scheme="https://1999lijian.github.io/categories/Java/"/>
    
    
    <category term="Java进阶" scheme="https://1999lijian.github.io/tags/Java%E8%BF%9B%E9%98%B6/"/>
    
  </entry>
  
  <entry>
    <title>Java</title>
    <link href="https://1999lijian.github.io/2020/11/12/java/"/>
    <id>https://1999lijian.github.io/2020/11/12/java/</id>
    <published>2020-11-12T13:24:39.000Z</published>
    <updated>2020-11-12T14:00:05.651Z</updated>
    
    <content type="html"><![CDATA[<h1 id="java"><a href="#java" class="headerlink" title="java"></a><strong>java</strong></h1><h2 id="java-简介"><a href="#java-简介" class="headerlink" title="java 简介"></a><strong>java 简介</strong></h2><p>Java是由Sun Microsystems公司于1995年5月推出的Java面向对象设计语言和Java平台的总称<br>由James Gosling和同事们共同研发，并在1995年正式推出</p><p>Java分为三个体系：</p><ul><li>JavaSE（J2SE）（Java 2 Platform Standard Edition，java平台标准版）</li><li>JavaEE（J2EE）（Java 2 Platform， Enterprise Edition，java平台企业版）</li><li>JavaME(J2ME)(Java 2 Platform Micro Edition,java平台微型版)</li></ul><p>2005年6月，JavaOne大会召开，SUN公司公开Java SE 6<br>此时，Java的各种版本已经更名以取消其中的数字“2”：J2EE更名为Java EE，J2SE更名为 Java ME</p><hr><h2 id="java主要特征"><a href="#java主要特征" class="headerlink" title="java主要特征"></a><strong>java主要特征</strong></h2><ul><li><strong>java语言是最简单的：</strong><br>java语言的语法与C语言和C++语言很接近，使得大多数程序员很容易学习和使用<br>另一方面，java丢弃了C++中很少使用的、很难理解的、令人迷糊的那些特征，如操作符重载、多继承、自动的强制类型装换<br>特别地，java语言不适用指针，而是引用<br>并提供了自动的废料收集，使得程序员不必为内存管理而担忧</li><li><strong>java语言是面向对象的：</strong><br>java语言提供类、接口和继承等原语，为了简单起见，只支持类之间的单继承，单支持接口之间的多继承，并支持类与接口之间的实现机制（关键字为implements）<br>java语言全面支持动态绑定，而C++语言只对虚函数使用动态绑定<br>总之，java语言是一个纯的面向程序设计语言</li><li><strong>java语言是分布式的：</strong><br>java语言支持Internet应用的开发，在基本的java应用编程接口中有一个网络应用编程接口（java net），它提供了用于网络应用编程的类库，包括URL、URLConnection、Socket、ServerSocket等<br>java的RMI（远程方法激活）机制也是开发分布式应用的重要手段</li><li><strong>java语言是健壮的：</strong><br>java的强类型机制、异常处理、垃圾的自动收集等是java程序健壮性的重要保证<br>对指针的丢弃是java的明智选择<br>java的安全检查机制使得java更具健壮性</li><li><strong>java语言是安全的：</strong><br>java通常被用在网络环境中，为此，java提供了一个安全机制一防恶意代码的攻击<br>除了java语言具有的许多安全特性以外，java对通过网络下载的类具有一个安全防范机制（类ClassLoader），如分配不同的名字空间以防替代本地的同名类、字节代码检查，并提供安全管理机制（类SecurityManager）让java应用设置安全哨兵</li><li><strong>java语言是体系结构中立的：</strong><br>java程序（后缀为java的文件）在java平台上被编译为体系结构中立的字节码格式（后缀为class的文件），然后可以在实现这个java平台的任何系统中运行<br>这种途径适合于异构的网络环境和软件的分发</li><li><strong>java语言是可移植的：</strong><br>这种可移植性来源于体系结构中立性，另外，java还严格规定了各个基本数据类型的长度<br>java系统本身也具有很强的可移植性，java编程器是用java实现的，java的运行环境是用ANSI实现的</li><li><strong>java语言是解释型的：</strong><br>如前所述，java程序在java平台上被编译为字节码格式，然后可以实现这个java平台的任何系统中运行<br>在运行时，java平台中的java解释器对这些字节码进行解释执行，执行过程中需要的类在联接阶段被载入到运行环境中</li><li><strong>java是高性能的：</strong><br>与那些解释型的高级脚本语言相比，java的确是高性的<br>事实上，java的运行速度随着JIT（Just-In-Time）编译器技术的技术的发展越来越接近于C++</li><li><strong>java语言是多线程的：</strong><br>在java语言中，线程是一种特殊的对象，它必须由Thread类或其子（孙）类来创建<br>通常有两种方法来创建线程：其一,使用型构为Thread（Runnable）的构造子将一个实现了Runnable接口的对象包装成一个线程，其二，从Thread类派生出子类并重写run方法，使用该子类创建的对象即为线程<br>值得注意的是Thread类已经实现了Runnable接口，因此，任何一个线程均有它的run方法，而run方法中包含了线程所要运行的代码<br>线程的活动由一组方法来控制<br>java语言支持多个线程的同时执行，并提供多线程之间的同步机制（关键字为synchronized）</li><li><strong>java语言是动态的：</strong><br>java语言的设计目标之一是适应于动态变化的环境<br>java程序需要的类能够动态地载入到运行环境，也可以通过网络来载入所需要的类<br>这也有利于软件的升级<br>另外，java中的类有一个运行时刻的表示，能进行运行时刻的类型检查</li></ul><hr><h2 id="java发展历史"><a href="#java发展历史" class="headerlink" title="java发展历史"></a><strong>java发展历史</strong></h2><ul><li>1995年5月23日，java语言诞生</li><li>1996年1月，第一个JDK-JDk1.0诞生</li><li>1996年4月，10个最主要的操作系统供应商申明将在其产品中嵌入java技术</li><li>1996年9月，约8.3万个网页应用了java技术来制造</li><li>1997年2月18日，JDK1.1发布</li><li>1997年4月2日，JavaOne会议召开，参与者逾一万人，创当时全球同会议规模之记录</li><li>1998年2月，JavaDeveloperConnection社区成员超过十万</li><li>1998年2月，JDk1.1被下载超过2，000，000次</li><li>1998年12月8日，Java2企业平台J2EE发布</li><li>1999年6月，SUN公司发布Java的三个版本：标准版（JavaSE，以前2是J2SE）、企业版（JavaEE以前是J2EE）和微型版（JavaME，以前是J2ME）</li><li>2000年5月8日，JDK1.3发布</li><li>2000年5月29日，JDK1.4发布</li><li>2001年6月5日，NOKIA宣布，到2003年将出售1亿部支持java的手机</li><li>2001年9月24日，J2EE1.3发布</li><li>2002年2月26日，J2SE1.4发布，自此java的计算能力有了大幅度提升</li><li>2004年9月30日18：00PM，J2SE1.5发布，成为java语言发展史上的又一里程碑<br>为了表示该版本的重要性，J2SE1.5更名为Java SE 5.0</li><li>2005年6月，JavaOne大会召开，SUN公司公开java SE 6<br>此时，java的各种版本已经更名，以取消其中的数字“2”：J2EE更名为javaEE，J2SE更名为java SE，J2ME更名为java ME</li><li>2006年12月，SUN公司发布JRE6.0</li><li>2009年4月20日，甲骨文74亿美元收购Sun<br>取得java的版权</li><li>2010年11月，由于甲骨文对于java社区的不友善，因此Apache扬言将退出JCP</li><li>2011年7月28日，甲骨文发布会java7.0的正式版</li></ul><hr><h2 id="java开发工具"><a href="#java开发工具" class="headerlink" title="java开发工具"></a><strong>java开发工具</strong></h2><p>java语言尽量保证系统内存在1G以上，其他工具如下所示：</p><ul><li>Linux系统或者Windows 95/98/2000/Xp,WIN 7/8系统</li><li>java JDK 7</li><li>Notepad编辑器或者其他编辑器</li><li>IDE：Eclipse</li></ul><p>安装好以上的工具后，我们就可以输出Java的第一个程序“Hello World”</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">public class MyFirtJavaProgram&#123;</span><br><span class="line"></span><br><span class="line">    public static void main(String []args)&#123;</span><br><span class="line">        System.out.println(&quot;Hello World&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h1 id="java基础语言"><a href="#java基础语言" class="headerlink" title="java基础语言"></a><strong>java基础语言</strong></h1><h2 id="java基础语言-1"><a href="#java基础语言-1" class="headerlink" title="java基础语言"></a><strong>java基础语言</strong></h2><p>一个java程序可以认为是一系列对象的集合，而这些对象通过调用彼此的方法来协同工作</p><p>下面简要介绍下类、对象、方法和实例变量的概念</p><ul><li><strong>对象</strong>：对象是类的一个实例，有状态和行为<br>列如，一条狗是对象，它的状态有：颜色、名字、品种；行为有：摇尾巴、叫、吃等</li><li><strong>类</strong>：类时一个模板，它描述一类对象的行为和状态</li><li><strong>方法</strong>：方法急救室行为，一个类可以有很多方法<br>逻辑运算、数据修改以及所有动作都是在方法中完成的</li><li><strong>实例变量</strong>：每个对象都有独特的实例变量，对象的状态有这些实例变量的值决定</li></ul><h2 id="第一个java程序"><a href="#第一个java程序" class="headerlink" title="第一个java程序"></a><strong>第一个java程序</strong></h2><p>下面看一个简单的java程序，它将打印字符串 Hello World</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">public class MyFirstJacaProgram&#123;</span><br><span class="line">   &#x2F;* 第一个java程序</span><br><span class="line">    * 它将打印字符串 Hello World</span><br><span class="line">    *&#x2F;</span><br><span class="line">    public static void main(String []args)&#123;</span><br><span class="line">        System.out.println(&quot;Hello World&quot;); &#x2F;&#x2F; 打印 Hello World</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a><strong>基本语法</strong></h2><p>编写java程序时，应注意以下几点：</p><ul><li><strong>大小写敏感</strong>：java是大小写敏感的，这就意味着标识符Hello与hello是不同</li><li><strong>类名</strong>：对于所有的类来说，类名的首字母应该大写<br>如果类名若干单词组成，那么每个单词的首字母应该大写，列如MyFirstJavaClass</li><li><strong>方法名</strong>：所有的方法名都应该以小写字母开头<br>如果方法名含有若干单词，则后面的每个单词首字母大写</li><li><strong>源文件名</strong>：源文件名必须和类名相同<br>当保存文件的时候，应该使用类名作为文件名保存（切记java是大小敏感的），文件名的后缀为.java（如果文件名和类名不相同则会导致编译错误）</li><li><strong>主方法入口</strong>：所有的java程序有**public static void main(String args[])**方法开始执行</li></ul><hr><h2 id="java标识符"><a href="#java标识符" class="headerlink" title="java标识符"></a><strong>java标识符</strong></h2><p>java所有的组成部分都需要名字<br>类名、变量名以及方法名都被称为标识符<br>关于java标识符，有以下几点需要注意：</p><ul><li>所有的标识符都应该以字母（A-Z或者a-z）、美元符（$）、或者下划线（_）开始</li><li>首字符之后可以是任何字符的组合</li><li>关键字不能用作为标识符</li><li>标识符是大小写敏感的</li><li>合法标识符举例：age、$salary、_value、__1_value</li><li>非法标识符举例：123abc、-salary</li></ul><hr><h2 id="java修饰符"><a href="#java修饰符" class="headerlink" title="java修饰符"></a><strong>java修饰符</strong></h2><p>像其他语言一样，java可以使用修饰符来修饰符来修饰类中方法和属性<br>主要有两类修饰符：</p><ul><li>访问控制修饰符：default、public、protrctde、private</li><li>非访问控制修饰符：final、abstract、static、synchronized和colatile</li></ul><hr><h2 id="java变量"><a href="#java变量" class="headerlink" title="java变量"></a><strong>java变量</strong></h2><p>java中主要有如下几种类型的变量</p><ul><li>局部变量</li><li>类变量（静态变量）</li><li>成员变量（非静态变量）</li></ul><hr><h2 id="java数组"><a href="#java数组" class="headerlink" title="java数组"></a><strong>java数组</strong></h2><p>数组是存储在堆上的对象，可以保存多个同类型变量</p><hr><h2 id="java枚举"><a href="#java枚举" class="headerlink" title="java枚举"></a><strong>java枚举</strong></h2><p>java5.0引入了枚举，枚举限制变量只能是预先设定好的值<br>使用枚举可以减少代码中的bug<br>列如，我们为果汁店设计一个程序，它将限制果汁为小杯、中杯、大杯<br>这就意味着他不允许顾客点除了这三种尺寸外的果汁</p><hr><h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a><strong>实例</strong></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">class FreshJuice&#123;</span><br><span class="line">    enum FreshJuiceSize&#123; SMALL,MEDIUM,LARGE &#125;</span><br><span class="line">    FreshJuiceSize size;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">piblic class FreshJuiceTest&#123;</span><br><span class="line">    public static void main(String []args)&#123;</span><br><span class="line">        FreshJuice Juice &#x3D; new FreshJuice();</span><br><span class="line">        juice.size &#x3D; FreshJuice.FreshJuiceSize.MEDIUM ;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注意</strong>：枚举可以单独声明或者声明在类里面<br>方法、变量、构造函数也可以在枚举中定义</p><hr><h2 id="java关键字"><a href="#java关键字" class="headerlink" title="java关键字"></a><strong>java关键字</strong></h2><p>下面列出java保留字<br>这些保留字不能用于常量、变量和任何标识符的名称</p><table><thead><tr><th>关键字</th><th>描述</th></tr></thead><tbody><tr><td>abstract</td><td>抽象方法，抽象类的修饰符</td></tr><tr><td>assert</td><td>断言条件是否满足</td></tr><tr><td>boolean</td><td>布尔数据类型</td></tr><tr><td>break</td><td>跳出循环或者label代码段</td></tr><tr><td>byte</td><td>8-bit有符号数据类型</td></tr><tr><td>case</td><td>switch语句的一个条件</td></tr><tr><td>catch</td><td>和try搭配捕捉异常信息</td></tr><tr><td>char</td><td>16-bit Unicode字符数据类型</td></tr><tr><td>class</td><td>定义类</td></tr><tr><td>const</td><td>未使用</td></tr><tr><td>continue</td><td>不执行循环体剩余部分</td></tr><tr><td>default</td><td>switch语句中的默认分支</td></tr><tr><td>do</td><td>循环语句，循环体至少会执行一次</td></tr><tr><td>double</td><td>64-bit双精度浮点数</td></tr><tr><td>else</td><td>if条件不成立时执行的分支</td></tr><tr><td>enum</td><td>枚举类型</td></tr><tr><td>extends</td><td>表示一个类是另一个类的子类</td></tr><tr><td>final</td><td>表示一个值在初始化之后就不能再改变了 表示方法不能被重写，或者一个类不能有子类</td></tr><tr><td>finally</td><td>为了完成执行的代码而设计的，主要是为了程序得健壮性和完整性，无论有没有异常发生都执行代码</td></tr><tr><td>float</td><td>32-bit单精度浮点数</td></tr><tr><td>for</td><td>for循环语句</td></tr><tr><td>goto</td><td>未使用</td></tr><tr><td>if</td><td>条件语句</td></tr><tr><td>implements</td><td>表示一个类实现了接口</td></tr><tr><td>import</td><td>导入类</td></tr><tr><td>instanceof</td><td>测试一个对象是否是某个类的实例</td></tr><tr><td>int</td><td>32位整型数</td></tr><tr><td>interface</td><td>接口，一种抽象的类型，仅有方法和常量的定义</td></tr><tr><td>long</td><td>64位整型数</td></tr><tr><td>native</td><td>表示方法用非java代码实现</td></tr><tr><td>new</td><td>分配新的类的实例</td></tr><tr><td>package</td><td>一系列相关类组成一个包</td></tr><tr><td>private</td><td>表示私有字段，或者方法等，只能从类内部访问</td></tr><tr><td>protected</td><td>表示字段只能通过类或其子类访问 子类或者在同一个包内的其他类</td></tr><tr><td>public</td><td>表示共有属性或者方法</td></tr><tr><td>return</td><td>方法返回值</td></tr><tr><td>short</td><td>16位数字</td></tr><tr><td>static</td><td>百世在类级别定义，所有实例共享的</td></tr><tr><td>strictfp</td><td>浮点数比较使用严格的规则</td></tr><tr><td>super</td><td>表示基类</td></tr><tr><td>switch</td><td>选择语句</td></tr><tr><td>synchronized</td><td>百世同一个时间只能由一个线程访问的代码块</td></tr><tr><td>this</td><td>表示调用当前实例或者调用另一个构造函数</td></tr><tr><td>throw</td><td>抛出异常</td></tr><tr><td>throws</td><td>定义方法可能抛出的异常</td></tr><tr><td>transient</td><td>修饰不要序列化的字段</td></tr><tr><td>try</td><td>表示代码块要做异常处理或者和finally配合表示是否抛出异常都执行finally中的代码</td></tr><tr><td>void</td><td>标记方法不返回任何值</td></tr><tr><td>volatile</td><td>标记字段可能会被多个线程同时访问，而不做同步</td></tr><tr><td>while</td><td>while循环</td></tr></tbody></table><hr><h2 id="java注释"><a href="#java注释" class="headerlink" title="java注释"></a><strong>java注释</strong></h2><p>类似于C/C++，java也支持单行以及多行注释<br>注释中的字符将被java编译器忽略</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">public class MyFirstJavaProgram&#123;</span><br><span class="line">    &#x2F;*这是第一个java程序</span><br><span class="line">     *它将打印Hello World</span><br><span class="line">     *这是一个多行注释的示例</span><br><span class="line">     *&#x2F;</span><br><span class="line">     public static void main(String[]args)&#123;</span><br><span class="line">     &#x2F;&#x2F; 这是单行注释的示例</span><br><span class="line">     &#x2F;*这个是单行注释的示例*&#x2F;</span><br><span class="line">     System.out.println(&quot;Hello World&quot;);</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="java空行"><a href="#java空行" class="headerlink" title="java空行"></a><strong>java空行</strong></h2><p>空白行，或者有注释的的行，java编译器都会忽略掉</p><hr><h2 id="继承"><a href="#继承" class="headerlink" title="继承"></a><strong>继承</strong></h2><p>在java中，一个类可以由其他类派生<br>如果要创建一个类，而且已经存在一个类具有你所需要的属性或者方法，那么可以将新创建的类继承该类<br>利用继承的方法，可以重用已存在类的方法和属性，而不用重写这些代码<br>该继承的类称为超类（superclass），派生类称为子类（subclass）</p><h2 id="接口"><a href="#接口" class="headerlink" title="接口"></a><strong>接口</strong></h2><p>在java中，接口可理解为对象间相互通信的协议<br>接口在继承中扮演着很重要的角色<br>接口只定义派生要用到的方法，但是方法的具体实现完全取决于派生类</p><hr><h1 id="java对象和类"><a href="#java对象和类" class="headerlink" title="java对象和类"></a><strong>java对象和类</strong></h1><h2 id="java对象和类-1"><a href="#java对象和类-1" class="headerlink" title="java对象和类"></a><strong>java对象和类</strong></h2><p>java作为一种面向对象语言<br>支持以下基本概念：</p><ul><li>多态</li><li>继承</li><li>封装</li><li>抽象</li><li>类</li><li>对象</li><li>实例</li><li>方法</li><li>消息解析</li></ul><p>重点研究对象和类的概念</p><ul><li><strong>对象</strong>：对象是类的一个实例，有状态和行为<br>列如，一条狗是一个对象，它的状态有：颜色、名字、品种；行为有：摇尾巴、叫、吃等</li><li><strong>类</strong>；类是一个模板，它描述一类对象的香味和状态</li></ul><hr><h2 id="java中的对象"><a href="#java中的对象" class="headerlink" title="java中的对象"></a><strong>java中的对象</strong></h2><p>深入了解什么是对象<br>看看周围真实的世界，会发现身边有很多对象，车、狗、人等等<br>所有这些对象都有自己的状态和行为<br>拿一条狗来举例，它的状态有：名字、品种、颜色，行为有：叫、摇尾巴和跑<br>对比现实对象和软件对象，它们之间十分相似<br>软件对象也有状态和行为<br>软件对象的状态就是属性，行为通过方法体现<br>在软件开发中，方法操作对象内部状态的改变，对象的相互调用也是方法来完成</p><h2 id="java中的类"><a href="#java中的类" class="headerlink" title="java中的类"></a><strong>java中的类</strong></h2><p>类可以看成是创建java对象的模板<br>通过下面一个简单的类来理解下java中类的定义：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">public class Dog&#123;</span><br><span class="line">    String breed;</span><br><span class="line">    int age;</span><br><span class="line">    String color;</span><br><span class="line">    void barking;()&#123;</span><br><span class="line">    &#125;</span><br><span class="line">    void hungry()&#123;</span><br><span class="line">    &#125;</span><br><span class="line">    void sleeping()&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一个类可以包含以下类型变量：</p><ul><li><strong>局部变量</strong>：在方法、构造方法或者语句块中定义的变量被称为局部变量<br>变量声明和初始化都是在方法中，方法结束后，变量就会自动销毁</li><li><strong>成员变量</strong>：成员变量是定义在类中，方法体之外的变量<br>这种变量在穿件对象的时候实例化<br>成员变量可以被类中方法、构造方法和特定的语句块访问</li><li><strong>类变量</strong>：类变量也声明在类中，方法体之外，但必须声明为static类型<br>一个类可以拥有多个方法，在上面例子中：barking(),hungry()和sleeping()都是Dog类的方法</li></ul><hr><h2 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a><strong>构造方法</strong></h2><p>每个类都有构造方法<br>如果没有显示地为类定义构造方法，java编译器将会为该类提供一个默认构造方法<br>在创建一个对象的时候，至少要调用一个构造方法<br>构造方法的名称必须与类同名，一个类可以有多个构造方法</p><p>下面是一个构造方法示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">public class Puppy&#123;</span><br><span class="line">    public puppy()&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public Puppy(String name)&#123;</span><br><span class="line">        &#x2F;&#x2F;这个构造仅有一个参数：name</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="创建对象"><a href="#创建对象" class="headerlink" title="创建对象"></a><strong>创建对象</strong></h2><p>对象是根据类创建的<br>在java中，使用关键字new来创建一个新的对象<br>创建对象需要以下三步：</p><ul><li><strong>声明</strong>：声明一个对象，包括对象名称和对象类型</li><li><strong>实例化</strong>：使用关键字new来创建一个对象</li><li><strong>初始化</strong>：使用new创建对象时，会调用构造方法初始化对象</li></ul><p>下面是一个创建对象的例子：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">public class Puppy&#123;</span><br><span class="line">    public Puppy(String name)&#123;</span><br><span class="line">        &#x2F;&#x2F;这个构造器仅有一个参数：name</span><br><span class="line">        System.out.println(&quot;Passed Name is :&quot;+name);</span><br><span class="line">    &#125;</span><br><span class="line">    public static void main(String []args)&#123;</span><br><span class="line">        &#x2F;&#x2F; 下面的语句将创建一个Puppy对象</span><br><span class="line">        Puppy myPuppy &#x3D; new Puppy(&quot;tommy&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译并运行上面的程序，会打印出下面的结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Passed name is :tommy</span><br></pre></td></tr></table></figure><hr><h2 id="访问实例变量和方法"><a href="#访问实例变量和方法" class="headerlink" title="访问实例变量和方法"></a><strong>访问实例变量和方法</strong></h2><p>通过已创建的对象来访问成员变量和成员方法，如下所示：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 实例化对象</span><br><span class="line">ObjectReference &#x3D; new Constructir();</span><br><span class="line">&#x2F;&#x2F; 访问其中的变量</span><br><span class="line">ObjectReference.variableName;</span><br><span class="line">&#x2F;&#x2F; 访问类中的方法</span><br><span class="line">ObjectReference.MethodName();</span><br></pre></td></tr></table></figure><hr><h2 id="实例-1"><a href="#实例-1" class="headerlink" title="实例"></a><strong>实例</strong></h2><p>下面的例子展示如何访问实例变量和调用成员方法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">public class Puppy&#123;</span><br><span class="line">    int puppyAge;</span><br><span class="line">    public Puppy(String name)&#123;</span><br><span class="line">        &#x2F;&#x2F; 这个构造仅有一个参数：name</span><br><span class="line">        System.out.println(&quot;Passed Name is :&quot;+name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setAge()&#123;</span><br><span class="line">        System.out.println(&quot;Puppy&#39;s age is :&quot;+ puppyAge);</span><br><span class="line">        return puppyAge;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static void main(String []args)&#123;</span><br><span class="line">        &#x2F;&#x2F;创建对象</span><br><span class="line">        Puppy myPuppy &#x3D; new Puppy(&quot;tommy&quot;);</span><br><span class="line">        &#x2F;&#x2F;通过方法来设定age</span><br><span class="line">        myPuppy.setAge(2);</span><br><span class="line">        &#x2F;&#x2F;调用另一个方法获取age</span><br><span class="line">        myPuppy.getAge();</span><br><span class="line">        &#x2F;&#x2F;也可以像下面这样访问成员变量</span><br><span class="line">        System.out.println(&quot;Variable Value :&quot;+myPuppy.puppyAge);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译并用运行上面的程序，产生如下结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Passed Name is :tommy</span><br><span class="line">Puppy&#39;s age is :2</span><br><span class="line">Variable Value :2</span><br></pre></td></tr></table></figure><hr><h2 id="源文件声明规则"><a href="#源文件声明规则" class="headerlink" title="源文件声明规则"></a><strong>源文件声明规则</strong></h2><p>当在一个源文件中定义多个类，并且还有import语句和package语句时，要特别注意这些规则</p><ul><li>一个源文件中只能有一个public类</li><li>一个源文件可以有多个非public类</li><li>源文件的名称应该和public类的类名保持一致<br>列如：源文件中public类的类名是Employee，那么源文件应该命名为Employee.java</li><li>如果一个类定义在某个包中，那么package语句应该在源文件的首行</li><li>如果源文件包含import语句，那么应该放在package语句和类定义之间<br>如果没有package语句，那么import语句应该在源文件中最前面</li><li>import语句和package语句对源文件中定义的所有类都有效<br>在同一源文件中，不能给不同的类不同的包声明</li></ul><p>类有若干种访问级别，并且类也分不同的类型： 抽象类和final类等<br>除了上面听到的几种类型，java还有一些特殊的类，如：内部类、匿名类</p><hr><h2 id="java包"><a href="#java包" class="headerlink" title="java包"></a><strong>java包</strong></h2><p>包主要用来对类和结果进行分类<br>当开发java程序时，可能编写成百上千的类，因此很有必要 对类和接口进行分类</p><hr><h2 id="Import语句"><a href="#Import语句" class="headerlink" title="Import语句"></a><strong>Import语句</strong></h2><p>在java中，如果给出一个完整的限定名，包括包名、类名，那么java编译器就可以很容易地定位到源代码或者类<br>Import语句就是用来提供一个合理的路径，使得编译器可以找到某个类</p><p>列如，下面的命令行将会命令编译器载入java_installation/java/io路径下的所有类</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">import java.io.*;</span><br></pre></td></tr></table></figure><hr><h2 id="一个简单的例子"><a href="#一个简单的例子" class="headerlink" title="一个简单的例子"></a>一个简单的例子</h2><p>在该例子中，创建两个类：Employee和EmployeeTest<br>注意将文件保存为Employee.java<br>Employee类有四个成员变量：name、age、designation和salary<br>该类显示声明一个构造方法，该方法只有一个参数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">import java.io.*;</span><br><span class="line">public class Employee&#123;</span><br><span class="line">    String name;</span><br><span class="line">    int age;</span><br><span class="line">    String designation;</span><br><span class="line">    double salary;</span><br><span class="line">    &#x2F;&#x2F;Employee类的构造器</span><br><span class="line">    public Employee(String name)&#123;</span><br><span class="line">        this.name &#x3D; name;</span><br><span class="line">    &#125;</span><br><span class="line">    &#x2F;&#x2F; 设置age的值</span><br><span class="line">    public void empAge(int empAge)&#123;</span><br><span class="line">        age &#x3D; empAge;</span><br><span class="line">    &#125;</span><br><span class="line">    &#x2F;&#x2F;设置designation的值</span><br><span class="line">    public void empDesignation(String empDesig)&#123;</span><br><span class="line">        designation &#x3D; empDesig;</span><br><span class="line">    &#125;</span><br><span class="line">    &#x2F;*设置salary的值*&#x2F;</span><br><span class="line">    public void empSalary(double empSalary)&#123;</span><br><span class="line">        salary &#x3D; empSalary;</span><br><span class="line">    &#125;</span><br><span class="line">    &#x2F;*打印信息*&#x2F;</span><br><span class="line">    public void printEmployee()&#123;</span><br><span class="line">        System.out.println(&quot;Name:&quot;+name);</span><br><span class="line">        System.out.println(&quot;Age:&quot;+age);</span><br><span class="line">        System.out.println(&quot;Designation:&quot;+designation);</span><br><span class="line">        System.out.println(&quot;Salary:&quot;+salary);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>程序都是从main方法开始执行<br>为了能运行这个程序必须包含main方法并且创建一个实例对象</p><p>下面给出EmployeeTest类，该类实例2个Employee类的实例，并调用方法设置变量的值<br>将下面的代码保存在EmployeeTest.java文件中</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">import java.io.*;</span><br><span class="line">public class EmployeeTest&#123;</span><br><span class="line"></span><br><span class="line">    public static void main(String []args)&#123;</span><br><span class="line">        &#x2F;*使用构造器创建两个对象*&#x2F;</span><br><span class="line">        Employee empOne &#x3D; new Employee(&quot;James Smith&quot;);</span><br><span class="line">        Employee empTwo &#x3D; new Employee(&quot;Mary Anne&quot;);</span><br><span class="line"></span><br><span class="line">        &#x2F;*调用这两个对象的成员方法*&#x2F;</span><br><span class="line">        empOne.empAge(26);</span><br><span class="line">        empOne.empDesignation(&quot;Senior Software Engineer&quot;);</span><br><span class="line">        empOne.empSalary(1000);</span><br><span class="line">        empONE.printEmployee();</span><br><span class="line"></span><br><span class="line">        empTwo.empAge(21);</span><br><span class="line">        empTwo.empDeignation(&quot;Software Engineer&quot;);</span><br><span class="line">        empTwo.emSalary(500);</span><br><span class="line">        empTwo.printEmployee();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译这两个文件并且运行EmployeeTest类，可以看到如下结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Name:James Smith</span><br><span class="line">Age:26</span><br><span class="line">Designation:Senior Software Engineer</span><br><span class="line">Salary:1000.0</span><br><span class="line">Name:Mary Anne</span><br><span class="line">Age:21</span><br><span class="line">Designation:Software Engineer</span><br><span class="line">Salary:500.0</span><br></pre></td></tr></table></figure><h1 id="java基本数据类型"><a href="#java基本数据类型" class="headerlink" title="java基本数据类型"></a><strong>java基本数据类型</strong></h1><h2 id="java基本数据类型-1"><a href="#java基本数据类型-1" class="headerlink" title="java基本数据类型"></a><strong>java基本数据类型</strong></h2><p>变量就是申请内存来存储值<br>也就是说，当创建变量的时候，需要在内存中申请空间<br>内存管理系统根据变量的类型为变量分配存储空间，分配的空间只能用来存储该类型数据<br>因此，通过定义不同类型的变量，可以在内存中存储整数、小数或者字符<br>java的两个大数据类型：</p><ul><li>内置数据类型</li><li>引用数据类型</li></ul><hr><h2 id="内置数据类型"><a href="#内置数据类型" class="headerlink" title="内置数据类型"></a>内置数据类型</h2><p>java语言提供了八种基本类型<br>六种数字类型（四个整数型，两个浮点型），一种字符类型，还有一个布尔型</p><p>byte：</p><ul><li>byte数据类型是8位、有符号的，以二进制补码表示的整数</li><li>最小值是-128（-2^7）</li><li>最大值是127（2^7-1）</li><li>默认值是0</li><li>byte类型用在大型数组中节约空间，主要代替整数，因为byte变量占用的空间只有int类型的四分之一</li><li>例子：byte a = 100 ， byte b = -50</li></ul><p>short：</p><ul><li>short数据类型是16位、有符号的以二进制补码表示的整数</li><li>最小值-32768（-2^15）</li><li>最大值32767（2^15-1）</li><li>short数据类型也可以像byte那样节省空间<br>一个short变量是int型变量所占空间的二分之一</li><li>默认值是0</li><li>例子：short s = 1000 , short r = -20000</li></ul><p>int:</p><ul><li>int数据类型是32位、有符号的以二进制补码表示的整数</li><li>最小值是-2，147，483，648（-2^31）</li><li>最大值是2,147,483,647(2^31-1)</li><li>一般地整数变量默认为int类型</li><li>默认值是0</li><li>例子：int a = 100000 ， int b = -200000</li></ul><p>long：</p><ul><li>long数据类型是64位、有符号的以二进制补码表示的整数</li><li>最小值是-9，223，372，036，854，775，808（-2^63）</li><li>最大值是9，223，372，036，854，775，807（2^63-1）</li><li>这种类型主要使用在需要比较大整数的系统上</li><li>默认值0L</li><li>例子： long a = 100000L , long b = -200000L</li></ul><p>float:</p><ul><li>float数据类型是单精度、32位、符合IEEE 754标准的浮点数</li><li>float在存储大型浮点数组的时候可节省内存空间</li><li>默认值是0.0f</li><li>浮点数不能用来表示精确的值，如货币</li><li>例子：float f1 = 234.5f</li></ul><p>double:</p><ul><li>double数据类型是双精度、64位、符合IEEE 754标准的浮点数</li><li>浮点数的默认类型为double类型</li><li>double类型同样不能表示精确的值，如货币</li><li>默认值0.0d</li><li>例子：double d1 = 123.4</li></ul><p>boolean:</p><ul><li>boolean数据类型表示一位的信息</li><li>只有两个取值：true和false</li><li>这种类型只作为一种标志来记录true/false情况</li><li>默认值是false</li><li>例子：boolean one = true</li></ul><p>char:</p><ul><li>char类型是一个单一的16位Unicode字符</li><li>最小值是’\u0000’(即为0)</li><li>最大值是’\uffff’(即为65，535)</li><li>char数据类型可以存储任何字符</li><li>例子：char letter = ‘A’</li></ul><hr><h2 id="实例-2"><a href="#实例-2" class="headerlink" title="实例"></a><strong>实例</strong></h2><p>对于数值类型的基本类型的取值范围，无需强制去记忆，因为它们的值都已经以常量的形式定义在对应的包装类中</p><p>例子：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">public class PrimitiveTypeTest&#123;</span><br><span class="line">    public static void main(String [] args)&#123;</span><br><span class="line">        &#x2F;&#x2F; byte</span><br><span class="line">        System.out.println(&quot;基本类型：byte 二进制位数：&quot;+Byte.SIZE);</span><br><span class="line">        System.out.println(&quot;包装类：java.lang,Byte&quot;);</span><br><span class="line">        System.out.println(&quot;最小值：Byte.MIN_VALUE&#x3D;&quot;+Byte.MIN_VALUE);</span><br><span class="line">        System.out.println(&quot;最大值：Byte.MAX_VALUE&#x3D;&quot;+Byte.MAX_VALUE);</span><br><span class="line">        System.out.println();</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F;short</span><br><span class="line">        System.out.println(&quot;基本类型：short  二进制位数：&quot;+Short.SIZE);</span><br><span class="line">        System.out.println(&quot;包装类: java.lang.Short&quot;);</span><br><span class="line">        System.out.println(&quot;最小值：Short.MIN_VALUE&#x3D;&quot;+Short.MIN_VALUE);</span><br><span class="line">        System.out.println(&quot;最大值：Short.MAX_VALUE&#x3D;&quot;+Short.MAX_VALUE);</span><br><span class="line">        System.out.println();</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F;int </span><br><span class="line">        System.out.println(&quot;基本类型：int 二进制位数：&quot;+Integer.SIZE);</span><br><span class="line">        System.out.println(&quot;包装类: java.lang.Integer&quot;);</span><br><span class="line">        System.out.println(&quot;最小值: Integer&gt;MIN_VALUE&#x3D;&quot;+Integer.MIN_VALUE);</span><br><span class="line">        System.out.println(&quot;最大值：Integer.MAX_VALUE&#x3D;&quot;+Interger.MAX_VALUE);</span><br><span class="line">        System.out.println();</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F;long</span><br><span class="line">        System.out.println(&quot;基本类型：long 二进制位数:&quot;+Long.SIZE);</span><br><span class="line">        System.out.println(&quot;包装类：java.lang.Long&quot;);</span><br><span class="line">        System.out.println(&quot;最小值：Long.MIN_VALUE&#x3D;&quot;+Long.MIN_VALUE);</span><br><span class="line">        System.out.println(&quot;最大值：Long.MAX_VALUE&#x3D;&quot;+Long.MAX_VALUE);</span><br><span class="line">        System.out.println()；</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F;float</span><br><span class="line">        System.out.println(&quot;基本类型： float 二进制位数：&quot;+Float.SIZE);</span><br><span class="line">        System.ouy.println(&quot;包装类：java.lang.Float&quot;);</span><br><span class="line">        System.out.println(&quot;最小值：Float.MIN_VALUE&#x3D;&quot;+Float.MIN_VALUE);</span><br><span class="line">        System.out.println(&quot;最大值：Float.MAX_VALUE&#x3D;&quot;+Float.MAX_VALUE);</span><br><span class="line">        System.out.println();</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F;double</span><br><span class="line">        System.out.println(&quot;基本类型：double 二进制位数：&quot;+Double.SIZE);</span><br><span class="line">        System.out.println(&quot;包装类：java.lang.Double&quot;);</span><br><span class="line">        System.out.println(&quot;最小值: Double.MIN_VALUE&#x3D;&quot;+Double.MIN_VALUE);</span><br><span class="line">        System.out.println(&quot;最大值：Double.MAX_VALUE&#x3D;&quot;+Double.MAX_VALUE);</span><br><span class="line">        System.out.println();</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F;char</span><br><span class="line">        System.out.println(&quot;基本类型：char 二进制位数：&quot;+Character.SIZE);</span><br><span class="line">        System.out.println(&quot;包装类：java.lang.Character&quot;);</span><br><span class="line">        &#x2F;&#x2F;以下数值形式而不是字符形式将Character.MIN_VALUE输出到控制台</span><br><span class="line">        System.out.println(&quot;最小值：Character.MIN_VALUE+(int)Character.MIN_VALUE);</span><br><span class="line">        &#x2F;&#x2F;以数值形式而不是字符形式将Character.MAX_VALUE输出到控制台</span><br><span class="line">        System.out.println(&quot;最大值：Charater.MAX_VALUE&#x3D;&quot;+(int)Character.MAX_VALUE);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译以上大米输出结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">基本类型：byte 二进制位数：8</span><br><span class="line">包装类：java.lang.Byte</span><br><span class="line">最小值：Byte.MIN_VALUE&#x3D;-128</span><br><span class="line">最大值：Byte.MAx_VALUE&#x3D;127</span><br><span class="line"></span><br><span class="line">基本类型：short 二进制位数：16</span><br><span class="line">包装类: java.lang.Byte</span><br><span class="line">最小值: Byte.MIN_VALUE&#x3D;-32768</span><br><span class="line">最大值：Byte.MAX_VALUE&#x3D;32767</span><br><span class="line"></span><br><span class="line">基本类型：long 二进制位数：64</span><br><span class="line">包装类：java.lang.Long</span><br><span class="line">最小值：Long.MIN_VALUE&#x3D;-9223372036854775808</span><br><span class="line">最大值：Long.MAX_vALUE&#x3D;9223372036854775807</span><br><span class="line"></span><br><span class="line">基本类型：float 二进制位数：32</span><br><span class="line">包装类：java.lang.Float</span><br><span class="line">最小值：Float.MIN_VALUE&#x3D;1.4E-45</span><br><span class="line">最大值：Float.MAX_VALUE&#x3D;3.4028235E38</span><br><span class="line"></span><br><span class="line">基本类型：double 二进制位数：64</span><br><span class="line">包装类：java.lang.Double</span><br><span class="line">最小值：Double.MIN_VALUE&#x3D;4.9E-324</span><br><span class="line">最大值：Double.MAX_VALUE&#x3D;1.7976931348623157E308</span><br><span class="line"></span><br><span class="line">基本类型：char 二进制位数：16</span><br><span class="line">包装类：java.lang.Character</span><br><span class="line">最小值：Character.MIN_VALUE&#x3D;0</span><br><span class="line">最大值：Character.MAX_VALUE&#x3D;65535</span><br></pre></td></tr></table></figure><p>Float和Double的最小值和最大值都是以科学技术法的形式数出的，结尾的“E+数字”表示E之前的数字要乘以10的“数字”次幂<br>比如3.14E3就是3.14x1000=3140,3.14E就是3.14/1000=0.00314<br>实际上，java中还存在另外一种基本类型void,它也有对应的包装类java.lang.Void,不过无法直接对它们进行操作</p><hr><h2 id="引用类型"><a href="#引用类型" class="headerlink" title="引用类型"></a><strong>引用类型</strong></h2><ul><li>引用类型变量有类的构造函数创建，可以使用它们访问所引用的对象<br>这些变量在声明时被指定为一个特定的类型，比如Employee、Pubby等<br>变量一旦声明后，类型就不能被改变</li><li>对象、数组都是引用数据类型</li><li>所有引用类型的默认值都是null</li><li>一个引用变量可以用来引用与任何之兼容的类型</li><li>例子：Animal animal = new Animal(“giraffe”)</li></ul><hr><h2 id="java常量"><a href="#java常量" class="headerlink" title="java常量"></a>java常量</h2><p>常量就是一个固定值<br>它们不需要计算，直接代表相应的值<br>常量指不能改变的量<br>在java中用final标志，声明方式和变量类似：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">final double PI &#x3D; 3.1415927;</span><br></pre></td></tr></table></figure><p>虽然常量也可以用小写，但为了便于识别，通常使用大写字母表示常量<br>字面量可以赋给任何内置类型的变量<br>例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">byte a &#x3D; 68;</span><br><span class="line">char a &#x3D;&#39;A&#39;;</span><br></pre></td></tr></table></figure><p>byte、int、long和short都可以用十进制、16进制以及8进制的方式来表示<br>当使用常量的时候，前缀0表面是8进制，而前缀0x代表16进制<br>例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">int decimal &#x3D; 100;</span><br><span class="line">int octal &#x3D; 0144;</span><br><span class="line">int hexa &#x3D;0x64;</span><br></pre></td></tr></table></figure><p>和其他语言一样，java的字符串常量也是包含在两个引号之间的字符序列<br>下面是字符串字面量的例子：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&quot;Hello World&quot;</span><br><span class="line">&quot;two\nlines&quot;</span><br><span class="line">&quot;\&quot;This is in quoter\&quot;&quot;</span><br></pre></td></tr></table></figure><p>字符串常量和字符常量都可以包含任何Unicode字符<br>例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">char a &#x3D; &#39;\u0001&#39;;</span><br><span class="line">String a &#x3D; &quot;\u0001&quot;;</span><br></pre></td></tr></table></figure><p>java语言支持一些特殊的转义字符序列</p><table><thead><tr><th>符号</th><th>字符含义</th></tr></thead><tbody><tr><td>\n</td><td>换行（0x0a）</td></tr><tr><td>\r</td><td>回车（0x0d）</td></tr><tr><td>\f</td><td>换页符（0x0c）</td></tr><tr><td>\b</td><td>退格（0x08）</td></tr><tr><td>\s</td><td>空格（0x20）</td></tr><tr><td>\t</td><td>制表符</td></tr><tr><td>“</td><td>双引号</td></tr><tr><td>‘</td><td>单引号</td></tr><tr><td>|反斜杠</td><td></td></tr><tr><td>\ddd</td><td>八进制字符（ddd）</td></tr><tr><td>\uxxxx</td><td>16进制Unicode字符（xxxx）</td></tr></tbody></table><hr><h1 id="java变量类型"><a href="#java变量类型" class="headerlink" title="java变量类型"></a><strong>java变量类型</strong></h1><h2 id="java变量类型-1"><a href="#java变量类型-1" class="headerlink" title="java变量类型"></a><strong>java变量类型</strong></h2><p>在java语言中，所有的变量在使用前必须声明</p><p>声明变量的基本格式如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">type identifier[&#x3D; valie][, identifier [&#x3D; value]...];</span><br></pre></td></tr></table></figure><p>格式说明：type为java数据类型<br>identifier是变量名<br>可以使用逗号隔开来声明多个同类型变量</p><p>以下列出一些变量的声明实例</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">int a,b,c; &#x2F;&#x2F;声明三个int型整数：a、b、c</span><br><span class="line">int d&#x3D;3,e,f&#x3D;5; &#x2F;&#x2F;声明三个整数并赋予初始值</span><br><span class="line">byte z&#x3D;22;  &#x2F;&#x2F;声明并初始化z</span><br><span class="line">double pi&#x3D;3.14159; &#x2F;&#x2F;声明了pi</span><br><span class="line">char x&#x3D;&#39;x&#39;;  &#x2F;&#x2F;变量x的值是字符&#39;x&#39;</span><br></pre></td></tr></table></figure><p>java语言支持的变量类型有：</p><ul><li>局部变量</li><li>实例变量</li><li>类变量</li></ul><hr><h2 id="java局部变量"><a href="#java局部变量" class="headerlink" title="java局部变量"></a><strong>java局部变量</strong></h2><ul><li>局部变量声明在方法、构造方法或者语句中</li><li>局部变量在方法、构造方法或者语句块被执行的时候创建，当它们执行完成后，变量将会被销毁</li><li>访问修饰符不能用于局部变量</li><li>局部变量只在声明它的方法、构造方法或者语句块中可见</li><li>局部变量是在栈上分配的</li><li>局部变量没有默认值，所有局部变量被声明后，必须经过初始化，才可以使用</li></ul><h3 id="实例1"><a href="#实例1" class="headerlink" title="实例1"></a><strong>实例1</strong></h3><p>在以下实例中age是一个局部变量<br>定义在pupAge()方法中，它的作用域就限制在这个方法中</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">public class Test&#123;</span><br><span class="line">    public void pupAge()&#123;</span><br><span class="line">        int age &#x3D; 0;</span><br><span class="line">        age &#x3D; age + 7;</span><br><span class="line">        System.out.println(&quot;Puppy age is:&quot;+age);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static void main(String []args)&#123;</span><br><span class="line">        Test test &#x3D; new Test();</span><br><span class="line">        test.pupAge();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上实例编译运行结果如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Puppy age is: 7</span><br></pre></td></tr></table></figure><h3 id="实例2"><a href="#实例2" class="headerlink" title="实例2"></a><strong>实例2</strong></h3><p>在下面的例子中age变量没有初始化，所以在编译时出错</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">public class Test&#123;</span><br><span class="line">    public void pupAge()&#123;</span><br><span class="line">        int age;  &#x2F;&#x2F;age变量没有初始化</span><br><span class="line">        age &#x3D; age + 7;</span><br><span class="line">        System.out.println(&quot;Puppy age is :&quot;+age); </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static void main(String []args)&#123;</span><br><span class="line">        Test test &#x3D; new Test();</span><br><span class="line">        test.pupAge;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上实例编译运行结果如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Test.java:4:variable number might not have been initialized</span><br><span class="line">age &#x3D; age + 7;</span><br><span class="line"></span><br><span class="line">1 error</span><br></pre></td></tr></table></figure><hr><h2 id="实例变量"><a href="#实例变量" class="headerlink" title="实例变量"></a><strong>实例变量</strong></h2><ul><li>实例变量声明在一个类中，但在方法、构造方法和语句块之外</li><li>当一个对象被实例化之后，每个实例变量的值就跟着确定</li><li>实例变量在对象创建的时候，在对象被销毁的时候销毁</li><li>实例变量的值应该至少被一个方法、构造方法或者语句块引用，使得外部能够通过获取实例变量信息</li><li>实例变量可以声明在使用前或者使用后</li><li>访问修饰符可以修饰实例变量</li><li>实例变量对于类中的方法、构造方法或者语句块是可见的<br>一般情况下应该吧实例变量设为私有<br>通过使用访问修饰符可以事实例变量对子类可见</li><li>实例变量具有默认值<br>数值型变量的默认值是0，布尔型变量的默认值是false，引用类型的默认值是null<br>变量的是可以在声明时指定，也可以在构造方法中指定</li><li>实例变量可以直接通过变量名访问<br>但在静态方法以及其他类中，就应该使用完全限定名：ObejectReference.VariableName</li></ul><h3 id="实例-3"><a href="#实例-3" class="headerlink" title="实例"></a><strong>实例</strong></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">import java.io.*;</span><br><span class="line">public class Employee&#123;</span><br><span class="line">    &#x2F;&#x2F;这个成员变量对子类可见</span><br><span class="line">    public String name;</span><br><span class="line">    &#x2F;&#x2F;私有变量，仅在该类可见</span><br><span class="line">    private double salary;</span><br><span class="line">    &#x2F;&#x2F;在构造器中对name赋值</span><br><span class="line">    public Employee (String empName)&#123;</span><br><span class="line">        name &#x3D; empName;</span><br><span class="line">    &#125;</span><br><span class="line">    &#x2F;&#x2F;设定salary的值</span><br><span class="line">    public void setSalary(double empSal)&#123;</span><br><span class="line">        salary &#x3D; empSal;</span><br><span class="line">    &#125;</span><br><span class="line">    &#x2F;&#x2F;打印信息</span><br><span class="line">    public void printEmp()&#123;</span><br><span class="line">        System.out.println(&quot;name :&quot;+name);</span><br><span class="line">        System.out.println(&quot;salary :&quot;+salary);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static void main(String []args)&#123;</span><br><span class="line">        Employee empOne &#x3D; new Employee(&quot;Ransika&quot;);</span><br><span class="line">        empOne.setSalary(1000);</span><br><span class="line">        empOne.printEmp();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上实例编译运行结果如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">name : Ransika</span><br><span class="line">salary :1000.0</span><br></pre></td></tr></table></figure><hr><h2 id="类变量（静态变量）"><a href="#类变量（静态变量）" class="headerlink" title="类变量（静态变量）"></a><strong>类变量（静态变量）</strong></h2><ul><li>类变量也称为静态变量，在类中以static关键字声明，但必须在方法、构造方法和语句块之外</li><li>无论一个类创建了多少个对象，类只拥有类变量的一份拷贝</li><li>静态变量除了被声明为常量外很少使用<br>常量是指声明为public/private、final和static类型的变量<br>常量初始化后不可改变</li><li>静态变量存储在静态存储区<br>经常被声明为常量，很少单独使用static声明变量</li><li>静态变量在程序开始是创建，在程序结束时销毁</li><li>与实例变量具有相似的可见性<br>但为了对类的使用者可见，大多数静态变量声明为public类型</li><li>默认值和实例变量相似<br>数值变量默认值是0，布尔型默认值是false，引用类型默认值是null<br>变量的值可以在声明的时候指定，也可以在构造方法中指定<br>此外，静态变量还可以在静态语句块中初始化</li><li>静态变量可以通过：ClassName.VariableName的方式访问</li><li>类变量被声明为public static final类型时，类变量名称必须使用大写字母<br>如果静态变量不是public和final类型，其命名方式与实例变量以及局部变量的命名方式一致</li></ul><h3 id="实例-4"><a href="#实例-4" class="headerlink" title="实例"></a><strong>实例</strong></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">import java.io.*;</span><br><span class="line">public class Employee&#123;</span><br><span class="line">    &#x2F;&#x2F;</span><br><span class="line">    private static double salary;</span><br><span class="line">    &#x2F;&#x2F;</span><br><span class="line">    public static final String DEPARTMENT &#x3D; &quot;Development&quot;;</span><br><span class="line">    public static void main(String []args)&#123;</span><br><span class="line">        salary &#x3D; 1000;</span><br><span class="line">        System.out.println(DEPARTMENT+&quot;average salary:&quot;+salary);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上实例编译运行结果如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Development average salary:1000</span><br></pre></td></tr></table></figure><p><strong>注意：</strong>如果其他类想要访问该变量，可以这样访问：Employee.DEPARTMENT</p><hr><h1 id="java修饰符-1"><a href="#java修饰符-1" class="headerlink" title="java修饰符"></a><strong>java修饰符</strong></h1><h2 id="java修饰符-2"><a href="#java修饰符-2" class="headerlink" title="java修饰符"></a><strong>java修饰符</strong></h2><p>java语言提供了很多修饰符，主要分为以下两类：</p><ul><li>访问修饰符</li><li>非访问修饰符</li></ul><p>修饰符用来定义类、方法或者变量，同常放在语句的最前端</p><h3 id="例子"><a href="#例子" class="headerlink" title="例子"></a><strong>例子</strong></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">public class className&#123;</span><br><span class="line">    &#x2F;&#x2F;...</span><br><span class="line">&#125;</span><br><span class="line">private boolean myFlag;</span><br><span class="line">static final double weeks &#x3D; 9.5;</span><br><span class="line">protected static final int BOXWIDTH &#x3D; 42;</span><br><span class="line">public static void main(String []arguments)&#123;</span><br><span class="line">    &#x2F;&#x2F;方法体</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="访问控制修饰符"><a href="#访问控制修饰符" class="headerlink" title="访问控制修饰符"></a><strong>访问控制修饰符</strong></h2><p>java中，可以使用访问控制符来保护对类、变量、方法和构造方法的访问<br>java支持4种不同的访问权限<br>默认的，也称为default，在同一包可见，不使用任何修饰符<br>私有的，以private修饰符指定，在同一类内可见<br>共有的，以public修饰符，对所有类可见</p><h2 id="默认访问修饰符-不使用任何关键字"><a href="#默认访问修饰符-不使用任何关键字" class="headerlink" title="默认访问修饰符-不使用任何关键字"></a><strong>默认访问修饰符-不使用任何关键字</strong></h2><p>使用默认访问修饰符声明的变量和方法，对不同一个包内的类是可见<br>接口里的变量都是隐式声明为public static final，而接口里的方法默认情况下访问权限为public</p><h3 id="实例-5"><a href="#实例-5" class="headerlink" title="实例"></a><strong>实例</strong></h3><p>变量和方法的声明可以不使用任何修饰符</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">String version &#x3D; &quot;1.5.1&quot;;</span><br><span class="line">boolean provessOrder()&#123;</span><br><span class="line">    return true;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="私有访问修饰符-private"><a href="#私有访问修饰符-private" class="headerlink" title="私有访问修饰符-private"></a><strong>私有访问修饰符-private</strong></h2><p>私有访问修饰符是最严格的访问级别，所以被声明Wieprivate的方法、变量和构造方法只能被所属类访问，并且类和接口不能声明为private<br>声明为私有访问类型的变量只能通过类中公共的getter方法被外部类访问<br>private访问修饰符的使用主要用来隐藏类的实现细节和保护类的数据</p><p>下面的类使用了私有访问修饰符：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">public class Logger&#123;</span><br><span class="line">    private String format;</span><br><span class="line">    public String getFormat()&#123;</span><br><span class="line">        return this.format;  </span><br><span class="line">    &#125;</span><br><span class="line">    public void serFormat(String format)&#123;</span><br><span class="line">        this.format &#x3D; format;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实例中，Logger类中的format变量为私有变量，所有其他类不能直接得到和设置该变量的值<br>为了使其他类能够操作该变量，定义了两个public方法：getFormat()(返回format的值)和setFormat(String)(设置format的值)</p><h2 id="公有访问修饰符-public"><a href="#公有访问修饰符-public" class="headerlink" title="公有访问修饰符-public"></a><strong>公有访问修饰符-public</strong></h2><p>被声明为public的类、方法、构造方法和接口能被任何其他类访问<br>如果几个相互访问的public类发布在不同的包中，则需要导入相应public类所在的包<br>由于类的继承性，类所有的公有方法和变量都能被其子类继承</p><p>以下函数使用了公有访问控制：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public static void main(String [] arguments)&#123;</span><br><span class="line">    &#x2F;&#x2F;...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>java程序得main()方法必须设置成公有的，否则，java解释器将不能运行该类</p><h2 id="受保护的访问修饰符-protected"><a href="#受保护的访问修饰符-protected" class="headerlink" title="受保护的访问修饰符-protected"></a><strong>受保护的访问修饰符-protected</strong></h2><p>被声明为protected的变量、方法和构造器能被同一个包中的任何其他类访问，云狗被不同包中的子类访问<br>protectde访问修饰符不能修饰符类和接口，方法和成员变量能够声明为protectde，但是接口的成员变量和成员方法不能声明为protected<br>子类能访问protected修饰符声明的方法和变量，这样就能保护不相关的类使用这些方法和变量</p><p>下面的父类使用了protected访问修饰符，子类重载了父类的openSpeaker()方法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">class AudioPlayer&#123;</span><br><span class="line">    protected boolean openSpeaker(Speaker sp)&#123;</span><br><span class="line">        &#x2F;&#x2F;实现细节</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">class StreamingAudioPlayer&#123;</span><br><span class="line">    boolean openSpeaker(Speaker sp)&#123;</span><br><span class="line">        &#x2F;&#x2F;实现细节</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果把openSpeaker()方法声明为private,那么除了AudioPlayer之外的类将不能访问该方法<br>如果把openSpeaker()声明为public,那么所有的类都能够访问该方法<br>如果只想让该方法对其所在类的子类可见，则将该方法声明为protected</p><h2 id="访问控制和继承"><a href="#访问控制和继承" class="headerlink" title="访问控制和继承"></a><strong>访问控制和继承</strong></h2><p>请注意以下方法继承的规则：</p><ul><li>父类中声明为public的方法在子类中也必须为public</li><li>父类中声明为protected的方法在子类中要么声明为protected，要么声明为public<br>不能声明为private</li><li>父类中声明为private的方法，不能够被继承</li></ul><hr><h2 id="非访问修饰符"><a href="#非访问修饰符" class="headerlink" title="非访问修饰符"></a><strong>非访问修饰符</strong></h2><p>为了实现一些其他的功能，java也提供了许多非访问修饰符<br>static修饰符，用来创建类方法和类变量<br>final修饰符，用来修饰类、方法和变量，final修理的类不能够被继承，修饰的方法不能被继承类重新定义，修饰的变量为常量，是不可修改的<br>abstract修饰符，用来创建抽象类和抽象方法<br>synchronized和volatile修饰符，主要用于线程的编程</p><h2 id="static修饰符"><a href="#static修饰符" class="headerlink" title="static修饰符"></a><strong>static修饰符</strong></h2><ul><li><strong>静态变量：</strong><br>static关键字来声明独立于对象的静态变量，无论一个类实例化多少对象，它的静态变量只有一份拷贝<br>静态变量也称为类变量<br>局部变量不能被声明为static变量</li><li><strong>静态方法：</strong><br>static关键字用来声明队里于对象的静态方法<br>静态方法不能使用类的非静态变量<br>静态方法从参数列表得到数据，然后计算这些数据</li></ul><p>对类变量和方法的访问可以直接是classname.variablename和classname.methodname的方式访问<br>如下例所示，static修饰符用来创建类方法和类变量</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">public class InstanceCounter&#123;</span><br><span class="line"></span><br><span class="line">    private static int numInstances &#x3D; 0;</span><br><span class="line"></span><br><span class="line">    protected static int getCount()&#123;</span><br><span class="line">        return numInstances;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private static void addInstance()&#123;</span><br><span class="line">        numInstances++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    InstanceCounter()&#123;</span><br><span class="line">        InstanceCounter.addInstance();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static void main(String []args)&#123;</span><br><span class="line"></span><br><span class="line">        System.out.println(&quot;Staring with&quot;+InstanceCounter.getCount()+&quot;instance&quot;);</span><br><span class="line"></span><br><span class="line">        for(int i &#x3D; 0;i&lt;500;++i)&#123;</span><br><span class="line">            new InstanceCounter();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.outprintln(&quot;Created&quot;+ InstanceCounter.getCount()+&quot;instances&quot;);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;java&quot;&gt;&lt;a href=&quot;#java&quot; class=&quot;headerlink&quot; title=&quot;java&quot;&gt;&lt;/a&gt;&lt;strong&gt;java&lt;/strong&gt;&lt;/h1&gt;&lt;h2 id=&quot;java-简介&quot;&gt;&lt;a href=&quot;#java-简介&quot; class=&quot;heade</summary>
      
    
    
    
    <category term="Java" scheme="https://1999lijian.github.io/categories/Java/"/>
    
    
    <category term="Java" scheme="https://1999lijian.github.io/tags/Java/"/>
    
  </entry>
  
</feed>
